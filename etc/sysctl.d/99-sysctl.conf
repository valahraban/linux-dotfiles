########
# virtual memory
# originally by Tzeentch with personal documentation, modified by Valahraban for personal taste, WTFPL
# tuned for Hydrus, Blender, heavy memory use applications, focus on minimal hanging and locks
# recommend setting up zram or zswap with minimum system ram size to 2x
########

########
# System memory is made up of virtual memory pages. A virtual memory page is a chunk of memory that either actually exists in RAM(real memory), or has been moved to disk.
# If the memory needed by the system exceeds the real memory available to the system the pages will be "swapped" from real memory to disk. The system must balance this demand with keeping important things in real memory and cleaning up.
# We are interested in pages representing an area in RAM (anonymous pages), and pages representing files written to disk( named/inode/dirent page)
# When the system reads or write a file from/to disk it doesn't immediately forget about that, and keeps pages which correspond to areas in that file.
# If you write a lot of files, or spend a lot of time reading the same indexes out of a database, these get cached with the expectation that they will be read again soon.
# If this is not the case, the system is wasting resource.  You can tune it do be more aggressive in reclaiming these pages instead of keeping them around with various settings.
########

#1 always overcommit, prevents the kernel from using a heuristic to decide that a process is bad for asking for a lot of memory at once and killing it.
#https://www.kernel.org/doc/Documentation/vm/overcommit-accounting
vm.overcommit_memory=1

#Force linux to reclaim pages if under 16 MiB is free, pausing the OS(allocstall)
#Any allocation under 16MiB will always succeed if there is virtual memory remaining 
#Set this to the minumum number of kiB you expect to need for any given allocation burst, chunky allocates don't fire off the OOM killer.
#You can set this value to less than that, and usually be safe as long as the watermark_scale_factor is high enough, but this is a guarantee
#that you won't crash for asking for any less than this much memory.
#Setting this value higher reduces the amount of real memory the OS is allowed to keep pages in, which means it will need to swap more.
#e.g. If you have 16GiB and you set this to 1GiB, you will actually only have 15GiB of real memory, the rest is reserved.
#4K RGB images take 51MiB setting this value to at least 50331 guarantees that the allocator will stall rather than killing the app asking for that allocation
vm.min_free_kbytes=16384
 
#Have kswapd try to reclaim 5.0% = 500/10000 of pages before returning to sleep
#Maximum value is 1000
#This increases responsiveness by reclaiming a larger portion of pages in low memory condition
#so that the next time you make a large allocation the kernel doesn't have to stall(allocstall) and look for pages to free immediately.
#Setting it higher means the system will spend more cycles doing work to find reclaimable pages instead of running programs, so play with it until you find a good balance.
#You might want to do a binary search with `sudo sysctl vm.watermrk_scale_factor=number` until you find an ideal compromise for your workflow  
#A higher value reclaims memory faster.  If you exceed vm.min_free_kbytes in an allocation the OOMkiller will fire,
#but a higher watermark scale keeps filling up the bucket of free memory so that doesn't happen.
vm.watermark_scale_factor=300

#improve responsiveness by freeing some pages that wouldn't normally qualify
vm.watermark_boost_factor = 15000

#Start freeing up pages that have been written but which are in open files, after 2 hours.
#Frees cached pages not recently used in files that stay open a long time like databases and logs
vm.dirtytime_expire_seconds=7200

#Have the kernel prefer to reclaim I/O pages at 105% of the rate at which it frees other pages.
#If you are writing and then closing many small files in quick succession biasing this helps reduce memory utilization
#because the OS won't cache metadata for files you don't intend to read for a while
#Don't set this value much over 100 or kswapd will spend a lot of time looking for I/O specific pages to free, instead of reclaiming other pages
vm.vfs_cache_pressure=105

#Only start swapping if less than 20% of real memory is available
#I expect zram to take about 1/5th (fragmented) of memory when full so this is a decent value
vm.swappiness=20

#Start async reclaiming pages if available memory is over 90% full or if the pages of any one program are over 30% of available.
vm.dirty_background_ratio=90
vm.dirty_ratio=30
